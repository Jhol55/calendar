# Script PowerShell para testar Judge0
Write-Host "üß™ Testando configura√ß√£o do Judge0..." -ForegroundColor Cyan
Write-Host ""

# Verificar containers
Write-Host "üì¶ Verificando containers..." -ForegroundColor Yellow
docker ps --filter name=judge0 --format "table {{.Names}}`t{{.Status}}`t{{.Ports}}"
Write-Host ""

# Logs do Redis
Write-Host "üìä Logs do Redis (√∫ltimas 10 linhas):" -ForegroundColor Yellow
docker logs judge0-redis --tail 10 2>&1
Write-Host ""

# Logs do Worker
Write-Host "üë∑ Logs do Worker (√∫ltimas 15 linhas):" -ForegroundColor Yellow
docker logs judge0-worker --tail 15 2>&1
Write-Host ""

# Testar Redis
Write-Host "üîå Testando conex√£o Redis..." -ForegroundColor Yellow
try {
    $redisTest = docker exec judge0-redis redis-cli --no-auth-warning -a "YourSecureRedisPasswordHere123!" ping 2>&1
    if ($redisTest -match "PONG") {
        Write-Host "‚úÖ Redis respondendo" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Redis n√£o est√° respondendo" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erro ao testar Redis" -ForegroundColor Red
}
Write-Host ""

# Testar API
Write-Host "üåê Testando API do Judge0..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:2358/about" -ErrorAction Stop
    Write-Host "‚úÖ API Judge0 respondendo" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìÑ Informa√ß√µes do Judge0:" -ForegroundColor Cyan
    $response.Content | ConvertFrom-Json | ConvertTo-Json -Depth 3
} catch {
    Write-Host "‚ùå API Judge0 n√£o est√° respondendo" -ForegroundColor Red
    Write-Host "Erro: $_" -ForegroundColor Red
}
Write-Host ""

# Testar execu√ß√£o de c√≥digo
Write-Host "üöÄ Testando execu√ß√£o de c√≥digo JavaScript..." -ForegroundColor Yellow
$body = @{
    source_code = 'console.log("Hello from Judge0!")'
    language_id = 63
    stdin = ""
} | ConvertTo-Json

try {
    $execResponse = Invoke-RestMethod -Uri "http://localhost:2358/submissions?wait=true" `
        -Method Post `
        -ContentType "application/json" `
        -Body $body `
        -ErrorAction Stop
    
    if ($execResponse.stdout -match "Hello from Judge0") {
        Write-Host "‚úÖ C√≥digo executado com sucesso!" -ForegroundColor Green
        Write-Host ""
        Write-Host "üì§ Output:" -ForegroundColor Cyan
        Write-Host $execResponse.stdout
    } else {
        Write-Host "‚ùå Erro ao executar c√≥digo" -ForegroundColor Red
        Write-Host "Response:" -ForegroundColor Yellow
        $execResponse | ConvertTo-Json -Depth 3
    }
} catch {
    Write-Host "‚ùå Erro ao executar c√≥digo" -ForegroundColor Red
    Write-Host "Erro: $_" -ForegroundColor Red
}

Write-Host ""
Write-Host "‚ú® Teste conclu√≠do!" -ForegroundColor Green

