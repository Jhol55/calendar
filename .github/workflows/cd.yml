name: CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_APP: ${{ github.repository }}-app
  IMAGE_NAME_WORKER: ${{ github.repository }}-worker

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for App
        id: meta-app
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_APP }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push App image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-app.outputs.tags }}
          labels: ${{ steps.meta-app.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_APP }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_APP }}:buildcache,mode=max
          target: runner
      
      - name: Extract metadata for Worker
        id: meta-worker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WORKER }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Worker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.worker
          push: true
          tags: ${{ steps.meta-worker.outputs.tags }}
          labels: ${{ steps.meta-worker.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WORKER }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WORKER }}:buildcache,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://seu-dominio.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Exemplo usando SSH para deploy
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Pull latest images
            docker compose pull
            
            # Run migrations
            docker compose run --rm app npx prisma migrate deploy
            
            # Restart services
            docker compose up -d --force-recreate
            
            # Clean up old images
            docker image prune -af
      
      # Alternativa: Deploy usando Docker via SSH
      # - name: Deploy to Server
      #   env:
      #     DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      #     DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      #     DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
      #   run: |
      #     echo "$DEPLOY_SSH_KEY" > deploy_key
      #     chmod 600 deploy_key
      #     ssh -i deploy_key -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
      #       cd /path/to/app
      #       docker compose pull
      #       docker compose up -d
      #     EOF
      
      # Alternativa: Deploy usando Kubernetes
      # - name: Install kubectl
      #   uses: azure/setup-kubectl@v3
      # 
      # - name: Configure kubectl
      #   run: |
      #     echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
      #     export KUBECONFIG=kubeconfig.yaml
      # 
      # - name: Deploy to Kubernetes
      #   run: |
      #     kubectl set image deployment/wazzy-app app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_APP }}:latest
      #     kubectl set image deployment/wazzy-worker worker=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WORKER }}:latest
      #     kubectl rollout status deployment/wazzy-app
      #     kubectl rollout status deployment/wazzy-worker
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          # Adicione notificações aqui (Slack, Discord, etc)
      
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # Adicione notificações aqui (Slack, Discord, etc)

