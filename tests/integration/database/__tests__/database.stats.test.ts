// ============================================
// TESTES DE ESTAT√çSTICAS - DatabaseService
// ============================================

import {
  createTestService,
  generateStringUserId,
  expectErrorCode,
} from '../../setup';
import { DatabaseService } from '@/services/database/database.service';

describe('DatabaseService - Estat√≠sticas', () => {
  console.log('\nüìã INICIANDO: DatabaseService - Estat√≠sticas');

  let service: DatabaseService;
  let userId: string;

  beforeEach(async () => {
    service = createTestService();
    userId = generateStringUserId();

    // Criar tabela de teste
    await service.addColumns(userId, 'stats_test', [
      { name: 'title', type: 'string', required: true },
      { name: 'priority', type: 'number' },
    ]);
  });

  // ============================================
  // 12.1. getTableStats
  // ============================================
  describe('getTableStats', () => {
    console.log('  üìÇ Grupo: getTableStats');

    it('deve retornar estrutura correta de stats', async () => {
      console.log('    ‚úì Teste: deve retornar estrutura correta de stats');
      const stats = await service.getTableStats(userId, 'stats_test');

      expect(stats).toMatchObject({
        tableName: expect.any(String),
        totalPartitions: expect.any(Number),
        totalRecords: expect.any(Number),
        fullPartitions: expect.any(Number),
        activePartition: expect.any(Number),
        schema: expect.any(Object),
      });

      expect(stats.schema.columns).toBeDefined();
      expect(Array.isArray(stats.schema.columns)).toBe(true);
    });

    it('stats iniciais devem refletir tabela vazia', async () => {
      console.log('    ‚úì Teste: stats iniciais devem refletir tabela vazia');
      const stats = await service.getTableStats(userId, 'stats_test');

      expect(stats.tableName).toBe('stats_test');
      expect(stats.totalPartitions).toBe(1); // Parti√ß√£o 0 sempre existe
      expect(stats.totalRecords).toBe(0);
      expect(stats.fullPartitions).toBe(0);
      expect(stats.activePartition).toBe(0);
      expect(stats.schema.columns).toHaveLength(2); // title e priority
    });

    it('stats devem atualizar ap√≥s inser√ß√µes', async () => {
      console.log('    ‚úì Teste: stats devem atualizar ap√≥s inser√ß√µes');
      // Inserir 3 registros
      for (let i = 0; i < 3; i++) {
        await service.insertRecord(userId, 'stats_test', {
          title: `Task ${i}`,
          priority: i,
        });
      }

      const stats = await service.getTableStats(userId, 'stats_test');

      expect(stats.totalRecords).toBe(3);
      expect(stats.totalPartitions).toBe(1);
      expect(stats.fullPartitions).toBe(0); // Ainda n√£o est√° cheia (MAX = 50)
      expect(stats.activePartition).toBe(0);
    });

    it('stats devem mostrar parti√ß√£o cheia corretamente', async () => {
      console.log(
        '    ‚úì Teste: stats devem mostrar parti√ß√£o cheia corretamente',
      );
      // Inserir 50 registros (encher primeira parti√ß√£o)
      for (let i = 0; i < 50; i++) {
        await service.insertRecord(userId, 'stats_test', {
          title: `Task ${i}`,
          priority: i,
        });
      }

      const stats = await service.getTableStats(userId, 'stats_test');

      expect(stats.totalRecords).toBe(50);
      expect(stats.totalPartitions).toBe(1);
      expect(stats.fullPartitions).toBe(1); // Primeira parti√ß√£o cheia
      expect(stats.activePartition).toBeNull(); // Nenhuma parti√ß√£o ativa (todas cheias)
    });

    it('stats devem refletir m√∫ltiplas parti√ß√µes', async () => {
      console.log('    ‚úì Teste: stats devem refletir m√∫ltiplas parti√ß√µes');
      // Inserir 75 registros (2 parti√ß√µes: 50 + 25)
      for (let i = 0; i < 75; i++) {
        await service.insertRecord(userId, 'stats_test', {
          title: `Task ${i}`,
          priority: i,
        });
      }

      const stats = await service.getTableStats(userId, 'stats_test');

      expect(stats.totalRecords).toBe(75);
      expect(stats.totalPartitions).toBe(2);
      expect(stats.fullPartitions).toBe(1); // Primeira parti√ß√£o cheia
      expect(stats.activePartition).toBe(1); // Segunda parti√ß√£o ativa
    });

    it('stats devem atualizar ap√≥s dele√ß√µes', async () => {
      console.log('    ‚úì Teste: stats devem atualizar ap√≥s dele√ß√µes');
      // Inserir 50 registros
      for (let i = 0; i < 50; i++) {
        await service.insertRecord(userId, 'stats_test', {
          title: `Task ${i}`,
          priority: i,
        });
      }

      // Verificar estado inicial
      let stats = await service.getTableStats(userId, 'stats_test');
      expect(stats.totalRecords).toBe(50);
      expect(stats.fullPartitions).toBe(1);

      // Deletar 2 registros
      await service.deleteRecords(userId, 'stats_test', {
        condition: 'AND',
        rules: [{ field: 'priority', operator: 'lessThan', value: 2 }],
      });

      // Verificar estado atualizado
      stats = await service.getTableStats(userId, 'stats_test');
      expect(stats.totalRecords).toBe(48);
      expect(stats.fullPartitions).toBe(0); // Parti√ß√£o n√£o est√° mais cheia
      expect(stats.activePartition).toBe(0); // Parti√ß√£o 0 est√° ativa novamente
    });

    it('stats devem refletir schema atualizado', async () => {
      console.log('    ‚úì Teste: stats devem refletir schema atualizado');
      // Stats iniciais
      let stats = await service.getTableStats(userId, 'stats_test');
      expect(stats.schema.columns).toHaveLength(2);

      // Adicionar coluna
      await service.addColumns(userId, 'stats_test', [
        { name: 'status', type: 'string' },
      ]);

      // Stats atualizadas
      stats = await service.getTableStats(userId, 'stats_test');
      expect(stats.schema.columns).toHaveLength(3);
      expect(stats.schema.columns[2].name).toBe('status');

      // Remover coluna
      await service.removeColumns(userId, 'stats_test', ['priority']);

      // Stats atualizadas novamente
      stats = await service.getTableStats(userId, 'stats_test');
      expect(stats.schema.columns).toHaveLength(2);
      expect(
        stats.schema.columns.find((c) => c.name === 'priority'),
      ).toBeUndefined();
    });

    it('deve lan√ßar erro para tabela inexistente', async () => {
      console.log('    ‚úì Teste: deve lan√ßar erro para tabela inexistente');
      await expectErrorCode(
        service.getTableStats(userId, 'nonexistent_table'),
        'TABLE_NOT_FOUND',
      );
    });
  });

  // ============================================
  // 12.2. Stats com Diferentes Cen√°rios
  // ============================================
  describe('Stats em Cen√°rios Diversos', () => {
    console.log('  üìÇ Grupo: Stats em Cen√°rios Diversos');

    it('stats com 3 parti√ß√µes (todas cheias)', async () => {
      console.log('    ‚úì Teste: stats com 3 parti√ß√µes (todas cheias)');
      // Inserir 150 registros (3 parti√ß√µes cheias: 50 + 50 + 50)
      for (let i = 0; i < 150; i++) {
        await service.insertRecord(userId, 'stats_test', {
          title: `Task ${i}`,
          priority: i,
        });
      }

      const stats = await service.getTableStats(userId, 'stats_test');

      expect(stats.totalRecords).toBe(150);
      expect(stats.totalPartitions).toBe(3);
      expect(stats.fullPartitions).toBe(3); // Todas cheias
      expect(stats.activePartition).toBeNull(); // Nenhuma ativa
    });

    it('stats ap√≥s updates n√£o devem mudar contagens', async () => {
      console.log('    ‚úì Teste: stats ap√≥s updates n√£o devem mudar contagens');
      // Inserir registros
      for (let i = 0; i < 15; i++) {
        await service.insertRecord(userId, 'stats_test', {
          title: `Task ${i}`,
          priority: i,
        });
      }

      // Stats antes do update
      const statsBefore = await service.getTableStats(userId, 'stats_test');

      // Atualizar todos
      await service.updateRecords(
        userId,
        'stats_test',
        { condition: 'AND', rules: [] },
        { priority: 999 },
      );

      // Stats depois do update
      const statsAfter = await service.getTableStats(userId, 'stats_test');

      // Contagens devem permanecer iguais
      expect(statsAfter.totalRecords).toBe(statsBefore.totalRecords);
      expect(statsAfter.totalPartitions).toBe(statsBefore.totalPartitions);
      expect(statsAfter.fullPartitions).toBe(statsBefore.fullPartitions);
    });

    it('stats de m√∫ltiplas tabelas devem ser independentes', async () => {
      console.log(
        '    ‚úì Teste: stats de m√∫ltiplas tabelas devem ser independentes',
      );
      // Criar segunda tabela
      await service.addColumns(userId, 'stats_test_2', [
        { name: 'data', type: 'string' },
      ]);

      // Inserir registros em ambas
      await service.insertRecord(userId, 'stats_test', {
        title: 'Task 1',
      });

      await service.insertRecord(userId, 'stats_test_2', {
        data: 'Data 1',
      });
      await service.insertRecord(userId, 'stats_test_2', {
        data: 'Data 2',
      });

      // Verificar stats independentes
      const stats1 = await service.getTableStats(userId, 'stats_test');
      const stats2 = await service.getTableStats(userId, 'stats_test_2');

      expect(stats1.totalRecords).toBe(1);
      expect(stats2.totalRecords).toBe(2);
      expect(stats1.schema.columns).toHaveLength(2);
      expect(stats2.schema.columns).toHaveLength(1);
    });

    it('stats devem mostrar activePartition corretamente ap√≥s atingir limite', async () => {
      console.log(
        '    ‚úì Teste: stats devem mostrar activePartition corretamente ap√≥s atingir limite',
      );
      // Inserir at√© encher a primeira parti√ß√£o
      for (let i = 0; i < 50; i++) {
        await service.insertRecord(userId, 'stats_test', {
          title: `Task ${i}`,
        });
      }

      // Parti√ß√£o 0 cheia, nenhuma ativa
      let stats = await service.getTableStats(userId, 'stats_test');
      expect(stats.activePartition).toBeNull();

      // Inserir mais um (criar parti√ß√£o 1)
      await service.insertRecord(userId, 'stats_test', {
        title: 'Task 50',
      });

      // Parti√ß√£o 1 est√° ativa
      stats = await service.getTableStats(userId, 'stats_test');
      expect(stats.activePartition).toBe(1);
    });
  });

  // ============================================
  // 12.3. Consist√™ncia de Stats
  // ============================================
  describe('Consist√™ncia de Stats', () => {
    console.log('  üìÇ Grupo: Consist√™ncia de Stats');

    it('soma de registros em todas as parti√ß√µes deve igualar totalRecords', async () => {
      console.log(
        '    ‚úì Teste: soma de registros em todas as parti√ß√µes deve igualar totalRecords',
      );
      // Inserir 120 registros (3 parti√ß√µes: 50 + 50 + 20)
      for (let i = 0; i < 120; i++) {
        await service.insertRecord(userId, 'stats_test', {
          title: `Task ${i}`,
        });
      }

      const stats = await service.getTableStats(userId, 'stats_test');

      // Buscar todos os registros reais
      const allRecords = await service.getRecords(userId, 'stats_test', {});

      // Total em stats deve bater com registros reais
      expect(stats.totalRecords).toBe(allRecords.length);
      expect(stats.totalRecords).toBe(120);
    });

    it('fullPartitions deve ser consistente com tamanho das parti√ß√µes', async () => {
      console.log(
        '    ‚úì Teste: fullPartitions deve ser consistente com tamanho das parti√ß√µes',
      );
      // Inserir 100 registros (2 parti√ß√µes cheias: 50 + 50)
      for (let i = 0; i < 100; i++) {
        await service.insertRecord(userId, 'stats_test', {
          title: `Task ${i}`,
        });
      }

      const stats = await service.getTableStats(userId, 'stats_test');

      expect(stats.totalPartitions).toBe(2);
      expect(stats.fullPartitions).toBe(2); // Ambas cheias
      expect(stats.totalRecords).toBe(100); // 50 + 50
    });
  });
});
