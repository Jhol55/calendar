import { prisma } from '../services/prisma';

/**
 * Salva ou atualiza uma mem√≥ria
 */
export async function salvarMemoria(
  userId: string,
  chave: string,
  valor: unknown,
  ttlSeconds?: number,
): Promise<{ success: boolean; expiresAt?: Date }> {
  try {
    const expiresAt = ttlSeconds
      ? new Date(Date.now() + ttlSeconds * 1000)
      : null;

    await prisma.chatbot_memories.upsert({
      where: {
        userId_chave: {
          userId,
          chave,
        },
      },
      create: {
        userId,
        chave,
        valor: valor as object,
        expiresAt,
      },
      update: {
        valor: valor as object,
        expiresAt,
        updatedAt: new Date(),
      },
    });

    console.log(`üíæ Mem√≥ria salva: ${userId}/${chave}`, {
      expiresAt,
      hasValue: !!valor,
    });

    return {
      success: true,
      expiresAt: expiresAt || undefined,
    };
  } catch (error) {
    console.error(`‚ùå Erro ao salvar mem√≥ria ${userId}/${chave}:`, error);
    throw error;
  }
}

/**
 * Busca uma mem√≥ria
 * - Se expirada, deleta e retorna valor padr√£o
 * - Se n√£o encontrar, retorna valor padr√£o
 */
export async function buscarMemoria(
  userId: string,
  chave: string,
  valorPadrao?: unknown,
): Promise<{ found: boolean; value: unknown; expired: boolean }> {
  try {
    const memoria = await prisma.chatbot_memories.findUnique({
      where: {
        userId_chave: {
          userId,
          chave,
        },
      },
    });

    // N√£o encontrou
    if (!memoria) {
      console.log(`üîç Mem√≥ria n√£o encontrada: ${userId}/${chave}`);
      return {
        found: false,
        value: valorPadrao,
        expired: false,
      };
    }

    // Verificar se expirou
    if (memoria.expiresAt && memoria.expiresAt < new Date()) {
      console.log(`‚è∞ Mem√≥ria expirada: ${userId}/${chave}, deletando...`);

      // Deletar mem√≥ria expirada
      await prisma.chatbot_memories.delete({
        where: { id: memoria.id },
      });

      return {
        found: false,
        value: valorPadrao,
        expired: true,
      };
    }

    // Mem√≥ria v√°lida
    console.log(`‚úÖ Mem√≥ria encontrada: ${userId}/${chave}`);
    return {
      found: true,
      value: memoria.valor,
      expired: false,
    };
  } catch (error) {
    console.error(`‚ùå Erro ao buscar mem√≥ria ${userId}/${chave}:`, error);
    return {
      found: false,
      value: valorPadrao,
      expired: false,
    };
  }
}

/**
 * Deleta uma mem√≥ria espec√≠fica
 */
export async function deletarMemoria(
  userId: string,
  chave: string,
): Promise<{ success: boolean; found: boolean }> {
  try {
    const memoria = await prisma.chatbot_memories.findUnique({
      where: {
        userId_chave: {
          userId,
          chave,
        },
      },
    });

    if (!memoria) {
      console.log(`üîç Mem√≥ria n√£o encontrada para deletar: ${userId}/${chave}`);
      return { success: true, found: false };
    }

    await prisma.chatbot_memories.delete({
      where: { id: memoria.id },
    });

    console.log(`üóëÔ∏è Mem√≥ria deletada: ${userId}/${chave}`);
    return { success: true, found: true };
  } catch (error) {
    console.error(`‚ùå Erro ao deletar mem√≥ria ${userId}/${chave}:`, error);
    throw error;
  }
}

/**
 * Lista todas as mem√≥rias de um usu√°rio (apenas v√°lidas)
 */
export async function listarMemorias(
  userId: string,
): Promise<Record<string, unknown>> {
  try {
    const memorias = await prisma.chatbot_memories.findMany({
      where: {
        userId,
        OR: [
          { expiresAt: null }, // Sem expira√ß√£o
          { expiresAt: { gte: new Date() } }, // Ainda n√£o expirou
        ],
      },
    });

    const memoriasMap: Record<string, unknown> = {};

    memorias.forEach((memoria) => {
      memoriasMap[memoria.chave] = memoria.valor;
    });

    console.log(
      `üìã Listando ${memorias.length} mem√≥rias para usu√°rio: ${userId}`,
    );

    return memoriasMap;
  } catch (error) {
    console.error(`‚ùå Erro ao listar mem√≥rias de ${userId}:`, error);
    return {};
  }
}

/**
 * Limpa mem√≥rias expiradas (para job de limpeza)
 */
export async function limparMemoriasExpiradas(): Promise<number> {
  try {
    const result = await prisma.chatbot_memories.deleteMany({
      where: {
        expiresAt: {
          not: null,
          lt: new Date(),
        },
      },
    });

    console.log(`üßπ Limpeza: ${result.count} mem√≥rias expiradas removidas`);
    return result.count;
  } catch (error) {
    console.error('‚ùå Erro na limpeza de mem√≥rias expiradas:', error);
    return 0;
  }
}
