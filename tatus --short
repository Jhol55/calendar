warning: in the working copy of 'src/components/layout/chatbot-flow/nodes/message-node/message-node-config.tsx', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/src/components/layout/chatbot-flow/nodes/message-node/message-node-config.tsx b/src/components/layout/chatbot-flow/nodes/message-node/message-node-config.tsx[m
[1mindex aa2866e..8e2a68b 100644[m
[1m--- a/src/components/layout/chatbot-flow/nodes/message-node/message-node-config.tsx[m
[1m+++ b/src/components/layout/chatbot-flow/nodes/message-node/message-node-config.tsx[m
[36m@@ -666,114 +666,6 @@[m [mfunction MessageFormFields({[m
     }[m
   }, [choices, carouselCards, interactiveMenuType, setValue]);[m
 [m
[31m-  // Atualizar choices no formul√°rio quando mudar (converter para strings com pipe)[m
[31m-  useEffect(() => {[m
[31m-    // üîí PROTE√á√ÉO: N√£o sobrescrever se estiver em modo JSON com vari√°vel din√¢mica[m
[31m-    if ([m
[31m-      configMode === 'json' &&[m
[31m-      (interactiveMenuType === 'list' || interactiveMenuType === 'carousel')[m
[31m-    ) {[m
[31m-      const isVariable = /^\{\{.+\}\}$/.test(jsonConfig.trim());[m
[31m-      if (isVariable) {[m
[31m-        return; // N√£o sobrescrever![m
[31m-      }[m
[31m-    }[m
[31m-[m
[31m-    if (interactiveMenuType === 'list') {[m
[31m-      // Para tipo "list", serializar categorias e itens em formato hier√°rquico[m
[31m-      const choicesStrings: string[] = [];[m
[31m-[m
[31m-      listCategories.forEach((category) => {[m
[31m-        // Adicionar categoria se tiver nome[m
[31m-        if (category.name && category.name.trim() !== '') {[m
[31m-          choicesStrings.push(`[${category.name}]`);[m
[31m-        }[m
[31m-[m
[31m-        // Adicionar itens da categoria[m
[31m-        category.items.forEach((item) => {[m
[31m-          if (item.text && item.text.trim() !== '') {[m
[31m-            choicesStrings.push([m
[31m-              `${item.text}|${item.id || ''}|${item.description || ''}`,[m
[31m-            );[m
[31m-          }[m
[31m-        });[m
[31m-      });[m
[31m-[m
[31m-      setValue('interactiveMenuChoices', JSON.stringify(choicesStrings));[m
[31m-    } else if (interactiveMenuType === 'carousel') {[m
[31m-      // Para tipo "carousel", serializar cart√µes e bot√µes[m
[31m-      const choicesStrings: string[] = [];[m
[31m-[m
[31m-      carouselCards.forEach((card) => {[m
[31m-        // Adicionar t√≠tulo e descri√ß√£o do cart√£o (formato: [T√≠tulo\nDescri√ß√£o])[m
[31m-        if (card.title && card.title.trim() !== '') {[m
[31m-          const titleLine = card.description[m
[31m-            ? `[${card.title}\n${card.description}]`[m
[31m-            : `[${card.title}]`;[m
[31m-          choicesStrings.push(titleLine);[m
[31m-        }[m
[31m-[m
[31m-        // Adicionar URL da imagem (formato: {URL})[m
[31m-        if (card.imageUrl && card.imageUrl.trim() !== '') {[m
[31m-          choicesStrings.push(`{${card.imageUrl}}`);[m
[31m-        }[m
[31m-[m
[31m-        // Adicionar bot√µes do cart√£o[m
[31m-        card.buttons.forEach((button) => {[m
[31m-          if (button.text && button.text.trim() !== '') {[m
[31m-            // Montar ID com prefixo baseado no actionType[m
[31m-            let finalId = button.id || '';[m
[31m-            if (button.actionType === 'copy') {[m
[31m-              finalId = `copy:${button.id}`;[m
[31m-            } else if (button.actionType === 'call') {[m
[31m-              finalId = `call:${button.id}`;[m
[31m-            } else if (button.actionType === 'return_id') {[m
[31m-              finalId = `${button.id}`;[m
[31m-            }[m
[31m-            // Para 'link', n√£o adiciona prefixo (j√° √© a URL completa)[m
[31m-[m
[31m-            choicesStrings.push(`${button.text}|${finalId}`);[m
[31m-          }[m
[31m-        });[m
[31m-      });[m
[31m-[m
[31m-      setValue('interactiveMenuChoices', JSON.stringify(choicesStrings));[m
[31m-    } else {[m
[31m-      // Para outros tipos (button, poll), usar o formato simples[m
[31m-      const choicesStrings = choices[m
[31m-        .map((choice) => {[m
[31m-          // Se n√£o tiver texto, n√£o incluir essa op√ß√£o[m
[31m-          if (!choice.text || choice.text.trim() === '') return '';[m
[31m-[m
[31m-          // Montar ID com prefixo baseado no actionType[m
[31m-          let finalId = choice.id || '';[m
[31m-          if (choice.actionType === 'copy') {[m
[31m-            finalId = `copy:${choice.id}`;[m
[31m-          } else if (choice.actionType === 'call') {[m
[31m-            finalId = `call:${choice.id}`;[m
[31m-          } else if (choice.actionType === 'return_id') {[m
[31m-            finalId = `${choice.id}`;[m
[31m-          }[m
[31m-          // Para 'link', n√£o adiciona prefixo (j√° √© a URL completa)[m
[31m-[m
[31m-          // Montar string: texto|id|descri√ß√£o[m
[31m-          // Sempre incluir os pipes, mesmo se id ou descri√ß√£o estiverem vazios[m
[31m-          return `${choice.text}|${finalId}|${choice.description || ''}`;[m
[31m-        })[m
[31m-        .filter((str) => str !== ''); // Remover strings vazias[m
[31m-[m
[31m-      setValue('interactiveMenuChoices', JSON.stringify(choicesStrings));[m
[31m-    }[m
[31m-  }, [[m
[31m-    choices,[m
[31m-    listCategories,[m
[31m-    carouselCards,[m
[31m-    interactiveMenuType,[m
[31m-    configMode,[m
[31m-    jsonConfig,[m
[31m-    setValue,[m
[31m-  ]);[m
[31m-[m
   // Fun√ß√µes para gerenciar choices simples (button, poll)[m
   const addChoice = () => {[m
     setChoices([[m
[36m@@ -2126,10 +2018,6 @@[m [mfunction MessageFormFields({[m
                       <Input[m
                         type="text"[m
                         fieldName={`choice_text_${index}`}[m
[31m-                        value={choice.text}[m
[31m-                        onChange={(e) =>[m
[31m-                          updateChoice(index, 'text', e.target.value)[m
[31m-                        }[m
                         placeholder={[m
                           interactiveMenuType === 'button'[m
                             ? 'Ex: Suporte T√©cnico'[m
[36m@@ -2181,10 +2069,6 @@[m [mfunction MessageFormFields({[m
                           <Input[m
                             type="text"[m
                             fieldName={`choice_id_${index}`}[m
[31m-                            value={choice.id}[m
[31m-                            onChange={(e) =>[m
[31m-                              updateChoice(index, 'id', e.target.value)[m
[31m-                            }[m
                             placeholder={[m
                               choice.actionType === 'copy'[m
                                 ? 'Ex: PROMO123'[m
[36m@@ -2217,10 +2101,6 @@[m [mfunction MessageFormFields({[m
                         <Input[m
                           type="text"[m
                           fieldName={`choice_description_${index}`}[m
[31m-                          value={choice.description}[m
[31m-                          onChange={(e) =>[m
[31m-                            updateChoice(index, 'description', e.target.value)[m
[31m-                          }[m
                           placeholder="Descri√ß√£o adicional (opcional)"[m
                         />[m
                       </div>[m
[36m@@ -2882,6 +2762,45 @@[m [mexport function MessageNodeConfig({[m
         }[m
       }[m
     }[m
[32m+[m[41m    [m
[32m+[m[32m    // Processar choices de bot√µes/poll se estiver em modo manual[m
[32m+[m[32m    if ([m
[32m+[m[32m      data.messageType === 'interactive_menu' &&[m
[32m+[m[32m      (data.interactiveMenuType === 'button' || data.interactiveMenuType === 'poll') &&[m
[32m+[m[32m      currentConfigMode === 'manual'[m
[32m+[m[32m    ) {[m
[32m+[m[32m      // Contar quantos choices existem lendo do formul√°rio[m
[32m+[m[32m      let choicesCount = 0;[m
[32m+[m[32m      while (data[`choice_text_${choicesC